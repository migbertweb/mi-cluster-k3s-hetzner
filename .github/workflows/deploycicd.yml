name: CI/CD Kustomize + KSOPS + Docker + Deploy + Telegram + Linters

on:
  push:
    branches:
      - master
    paths:
      - 'apps/deployCICD/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/deployCICD

    steps:
    - name: Checkout del repositorio
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GH_PAT }}

    - name: Configurar Git
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"

    - name: Generar nuevo tag semántico
      id: tag
      uses: mathieudutour/github-tag-action@v6.1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        release_branches: master
        tag_prefix: "v"
        default_bump: patch

    - name: Login a DockerHub
      run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build y push de imagen Docker
      run: |
        IMAGE=${{ secrets.DOCKER_USERNAME }}/php-redis-app
        TAG=${{ steps.tag.outputs.new_tag }}

        docker build -t $IMAGE:$TAG -t $IMAGE:latest .
        docker push $IMAGE:$TAG
        docker push $IMAGE:latest

    - name: Instalar Kustomize y KSOPS
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

        mkdir -p ~/.config/kustomize/plugin/viaduct.ai/v1/ksops
        curl -Lo ksops https://github.com/viaduct-ai/kustomize-sops/releases/latest/download/ksops-linux-amd64
        chmod +x ksops
        mv ksops ~/.config/kustomize/plugin/viaduct.ai/v1/ksops/ksops

    - name: Instalar Age y SOPS
      run: |
        curl -L https://github.com/FiloSottile/age/releases/download/v1.1.1/age-v1.1.1-linux-amd64.tar.gz | tar xz
        sudo mv age/age /usr/local/bin/
        sudo mv age/age-keygen /usr/local/bin/

        curl -L https://github.com/mozilla/sops/releases/download/v3.8.1/sops-v3.8.1.linux -o /usr/local/bin/sops
        chmod +x /usr/local/bin/sops

    - name: Configurar clave privada de Age
      run: |
        mkdir -p ~/.config/sops/age
        echo "${{ secrets.SOPS_AGE_KEY }}" > ~/.config/sops/age/keys.txt

    - name: Actualizar tag en kustomization.yaml
      run: |
        IMAGE=${{ secrets.DOCKER_USERNAME }}/php-redis-app
        TAG=${{ steps.tag.outputs.new_tag }}
        kustomize edit set image $IMAGE=$IMAGE:$TAG

    - name: Hacer commit y push del nuevo tag
      run: |
        git add kustomization.yaml
        git commit -m "chore: update image tag to ${{ steps.tag.outputs.new_tag }}"
        git push origin master

    - name: Configurar Kubeconfig
      run: |
        echo "${{ secrets.KUBECONFIG }}" > kubeconfig.yaml
        export KUBECONFIG=$PWD/kubeconfig.yaml

    - name: Lint con kube-linter
      run: |
        curl -sSL https://github.com/stackrox/kube-linter/releases/latest/download/kube-linter-linux.tar.gz | tar xz
        ./kube-linter lint <(kustomize build .)

    - name: Validación con kubeval
      run: |
        curl -LO https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
        tar -xzf kubeval-linux-amd64.tar.gz
        ./kubeval --strict --exit-on-error <(kustomize build .)

    - name: Aplicar despliegue al clúster
      env:
        KUBECONFIG: ${{ github.workspace }}/apps/deployCICD/kubeconfig.yaml
      run: |
        kustomize build . | kubectl apply -f -

    - name: Notificación por Telegram (éxito)
      if: success()
      run: |
        START_TIME=$(date -d "${{ github.event.head_commit.timestamp }}" +%s)
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))

        CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | sed ':a;N;$!ba;s/\n/\\n/g')

        curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
        -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
        -d text="✅ *Deploy exitoso*\n\n📦 Versión: *${{ steps.tag.outputs.new_tag }}*\n🚀 Proyecto: \`${{ github.repository }}\`\n🌿 Rama: \`${{ github.ref_name }}\`\n🔁 Commit: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})\n🕒 Duración: *${DURATION}s*\n🧾 Archivos modificados:\n\`\`\`\n${CHANGED_FILES}\n\`\`\`" \
        -d parse_mode=Markdown

    - name: Notificación por Telegram (fallo)
      if: failure()
      run: |
        START_TIME=$(date -d "${{ github.event.head_commit.timestamp }}" +%s)
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))

        CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | sed ':a;N;$!ba;s/\n/\\n/g')

        curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
        -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
        -d text="❌ *Error en Deploy*\n\n📦 Proyecto: \`${{ github.repository }}\`\n🌿 Rama: \`${{ github.ref_name }}\`\n🔁 Commit: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})\n🕒 Duración: *${DURATION}s*\n🧾 Archivos modificados:\n\`\`\`\n${CHANGED_FILES}\n\`\`\`" \
        -d parse_mode=Markdown
