name: CI/CD Kustomize + KSOPS + Docker + Deploy + Telegram + Linters

on:
  push:
    branches:
      - master
    paths:
      - "apps/deployCICD/**"
jobs:
  deploy:
    # Evita que el job corra si fue ejecutado por el bot
    if: github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/deployCICD
    ###
    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_PAT }}
      # Configurar Git
      - name: Configurar Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      ###############################
      # Linting con Kube-linter
      - name: Linting con kube-linter
        run: |
          set -euo pipefail

          # Descargar y extraer kube-linter
          curl -sSL https://github.com/stackrox/kube-linter/releases/latest/download/kube-linter-linux.tar.gz | tar xz

          echo "üîç Ejecutando kube-linter sobre los manifiestos de Kustomize..."

          # Ejecutar kube-linter y capturar errores
          if ! ./kube-linter lint <(kustomize build ${{ github.workspace }}/apps/deployCICD/k8s/overlays/prod); then
            echo "‚ùå KubeLinter encontr√≥ errores. Por favor corrige antes de continuar."
            exit 1
          else
            echo "‚úÖ KubeLinter: sin errores."
          fi
      # Validaci√≥n con Kubeconform (reemplazo moderno de kubeval)
      - name: Validaci√≥n de manifiestos con kubeconform
        run: |
          set -euo pipefail

          echo "üì• Descargando kubeconform..."
          curl -L https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz | tar xz

          echo "üîç Ejecutando kubeconform sobre los manifiestos generados por Kustomize..."

          if ! kustomize build ${{ github.workspace }}/apps/deployCICD/k8s/overlays/prod | ./kubeconform -strict -summary -kubernetes-version 1.32.4 -skip "IngressRoute"; then
            echo "‚ùå kubeconform detect√≥ errores de validaci√≥n en los manifiestos. Corr√≠gelos antes de hacer deploy."
            exit 1
          else
            echo "‚úÖ kubeconform: todos los manifiestos son v√°lidos y cumplen con los esquemas de Kubernetes."
          fi
      #############################
      # Generacion de nuevo tag sem√°ntico
      - name: Generar nuevo tag sem√°ntico
        id: tag
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GH_PAT }}
          release_branches: master
          tag_prefix: "v"
          default_bump: patch
      # Creacion de imagen docker para amd64 y arm64
      - name: Configurar Buildx para multi-arch
        uses: docker/setup-buildx-action@v3
      - name: Login a DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Build y push multiplataforma (amd64 + arm64)
        uses: docker/build-push-action@v5
        with:
          context: ./apps/deployCICD
          file: ./apps/deployCICD/Dockerfile
          push: true
          platforms: linux/arm64, linux/amd64 # despues agrego para amd64
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/php-redis-app:${{ steps.tag.outputs.new_tag }}
            ${{ secrets.DOCKER_USERNAME }}/php-redis-app:latest
      ###############################################
      # Instalacion de herramientas necesarias para K8s
      - name: Instalar Kustomize y KSOPS
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

          mkdir -p ~/.config/kustomize/plugin/viaduct.ai/v1/ksops
          curl -Lo ksops https://github.com/viaduct-ai/kustomize-sops/releases/latest/download/ksops-linux-amd64
          chmod +x ksops
          mv ksops ~/.config/kustomize/plugin/viaduct.ai/v1/ksops/ksops
      # Instalar Age y SOPS
      - name: Instalar Age y SOPS
        run: |
          curl -L https://github.com/FiloSottile/age/releases/download/v1.1.1/age-v1.1.1-linux-amd64.tar.gz | tar xz
          sudo mv age/age /usr/local/bin/
          sudo mv age/age-keygen /usr/local/bin/

          curl -L https://github.com/mozilla/sops/releases/download/v3.8.1/sops-v3.8.1.linux -o /usr/local/bin/sops
          chmod +x /usr/local/bin/sops
      # Configurar clave privada de Age
      - name: Configurar clave privada de Age
        run: |
          mkdir -p ~/.config/sops/age
          echo "${{ secrets.SOPS_AGE_KEY }}" > ~/.config/sops/age/keys.txt
      # actualizar tag en kustomization.yaml
      - name: Actualizar tag en kustomization.yaml
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/php-redis-app
          TAG=${{ steps.tag.outputs.new_tag }}
          ls -la
          cd k8s/base
          kustomize edit set image $IMAGE=$IMAGE:$TAG
      # Configurar Kubeconfig
      - name: Configurar Kubeconfig
        run: |
          echo "${{ secrets.KUBECONFIG }}" > kubeconfig.yaml
          export KUBECONFIG=$PWD/kubeconfig.yaml

      ###############################
      # Aplicar despliegue al cl√∫ster
      - name: Aplicar despliegue al cl√∫ster
        env:
          KUBECONFIG: ${{ github.workspace }}/apps/deployCICD/kubeconfig.yaml
        run: |
          ls -la
          echo "Aplicando despliegue al cl√∫ster..."
          kustomize build  ${{ github.workspace }}/apps/deployCICD/k8s/overlays/prod | kubectl apply -f -

      - name: Hacer commit y push del nuevo tag
        run: |
          git add k8s/base/kustomization.yaml
          git commit -m "CICD: Updated image to ${{ steps.tag.outputs.new_tag }} [skip ci]"
          git push origin master
      ###############################
      ## Mensajes de notificaci√≥n por Telegram
      # exitoso
      - name: Notificaci√≥n por Telegram (√©xito)
        if: success()
        run: |
          START_TIME=$(date -d "${{ github.event.head_commit.timestamp }}" +%s)
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          MINUTES=$((DURATION / 60))
          SEGUNDOS=$((DURATION % 60))
          if [ $MINUTES -gt 0 ]; then
            DURATION="${MINUTES} minutos y ${SEGUNDOS} segundos"
          else
            DURATION="${SEGUNDOS} segundos"
          fi
          # Formatear el tiempo de duraci√≥n

          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }})
          FORMATTED_FILES=$(echo "$CHANGED_FILES" | sed '/^$/d' | sed 's/^/‚Ä¢ /')

          MESSAGE="‚úÖ *Deploy exitoso*
          üì¶ *Versi√≥n:* \`${{ steps.tag.outputs.new_tag }}\`
          üöÄ *Proyecto:* [${{ github.repository }}](https://github.com/${{ github.repository }})
          üåø *Rama:* \`${{ github.ref_name }}\`
          üîÅ *Commit:* [\`${SHORT_SHA}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          üïí *Duraci√≥n:* \`${DURATION}\`
          üßæ *Archivos modificados:*
          $FORMATTED_FILES"

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode="Markdown" \
            -d text="$MESSAGE"
      # fallo
      - name: Notificaci√≥n por Telegram (fallo)
        if: failure()
        run: |
          START_TIME=$(date -d "${{ github.event.head_commit.timestamp }}" +%s)
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          MINUTES=$((DURATION / 60))
          SEGUNDOS=$((DURATION % 60))
          if [ $MINUTES -gt 0 ]; then
            DURATION="${MINUTES} minutos y ${SEGUNDOS} segundos"
          else
            DURATION="${SEGUNDOS} segundos"
          fi
          # Formatear el tiempo de duraci√≥n
          EXIT_CODE=$?

          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }})
          FORMATTED_FILES=$(echo "$CHANGED_FILES" | sed '/^$/d' | sed 's/^/‚Ä¢ /')

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode="Markdown" \
            -d text="‚ùå *Error en Deploy*

          üöÄ *Proyecto:* [${{ github.repository }}](https://github.com/${{ github.repository }})
          üåø *Rama:* \`${{ github.ref_name }}\`
          üîÅ *Commit:* [\`${SHORT_SHA}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          üïí *Duraci√≥n:* \`${DURATION}\`
          üí• *C√≥digo de error:* \`${EXIT_CODE}\`

          üßæ *Archivos modificados:*
          $FORMATTED_FILES"
